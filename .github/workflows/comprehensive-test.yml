name: MarkPDFDown Comprehensive Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Verify installation
      run: |
        python --version
        pip list

    - name: Create test environment file
      run: |
        cp .env.template .env
        echo "OPENAI_API_KEY=test_key_placeholder" >> .env
        echo "OPENAI_API_BASE=https://api.openai.com/v1" >> .env
        echo "OPENAI_DEFAULT_MODEL=gpt-4o-mini" >> .env

    - name: Run comprehensive test suite
      run: |
        python test_comprehensive.py

    - name: Run quick test suite (fallback)
      if: failure()
      run: |
        python test_comprehensive.py quick

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report-${{ matrix.os }}-${{ matrix.python-version }}
        path: test_report.json

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Run Ruff linter
      run: |
        ruff check .

    - name: Run Ruff formatter check
      run: |
        ruff format --check .

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety dependency scanner
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  integration:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test configuration
      run: |
        cp .env.template .env
        # Note: OPENAI_API_KEY access is intentional for testing purposes
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY || 'test_key_placeholder' }}" >> .env
        echo "OPENAI_API_BASE=https://api.openai.com/v1" >> .env
        echo "OPENAI_DEFAULT_MODEL=gpt-4o-mini" >> .env

    - name: Test configuration loading
      run: |
        python -c "
        import importlib.util
        spec = importlib.util.spec_from_file_location('config', 'config.py')
        config_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(config_module)
        config = config_module.config
        print(f'✅ Config loaded successfully')
        print(f'   API Base: {config.OPENAI_API_BASE}')
        print(f'   Model: {config.OPENAI_DEFAULT_MODEL}')
        print(f'   API Key: {\"*\" * (len(config.OPENAI_API_KEY) - 4) + config.OPENAI_API_KEY[-4:] if len(config.OPENAI_API_KEY) > 4 else \"****\"}')
        "

    - name: Test core module imports
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from core.LLMClient import LLMClient
        from core.PDFWorker import PDFWorker
        from core.FileWorker import FileWorker
        from core.ImageWorker import ImageWorker
        print('✅ All core modules imported successfully')
        "

    - name: Run integration test
      run: |
        python test_comprehensive.py config

  report:
    runs-on: ubuntu-latest
    needs: [test, lint, security, integration]
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all test reports
      uses: actions/download-artifact@v4

    - name: Generate summary report
      run: |
        echo "# MarkPDFDown Test Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "### Comprehensive Tests" >> test-summary.md
        if ls test-report-*/test_report.json 1> /dev/null 2>&1; then
          echo "✅ Test reports generated" >> test-summary.md
        else
          echo "❌ No test reports found" >> test-summary.md
        fi
        echo "" >> test-summary.md
        
        echo "### Security Scan" >> test-summary.md
        if ls security-reports/*.json 1> /dev/null 2>&1; then
          echo "✅ Security reports generated" >> test-summary.md
        else
          echo "❌ No security reports found" >> test-summary.md
        fi
        echo "" >> test-summary.md
        
        echo "Generated at: $(date)" >> test-summary.md

    - name: Upload summary report
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
